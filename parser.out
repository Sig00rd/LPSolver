Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> result
Rule 1     result -> expression
Rule 2     result -> empty
Rule 3     result -> expression COMPARISON expression COMPARISON expression
Rule 4     result -> expression COMPARISON expression
Rule 5     expression -> INT
Rule 6     expression -> FLOAT
Rule 7     expression -> CONST_PI
Rule 8     expression -> CONST_E
Rule 9     expression -> VARIABLE
Rule 10    expression -> MINUS expression
Rule 11    expression -> expression PLUS expression
Rule 12    expression -> expression MINUS expression
Rule 13    expression -> expression MULTIPLY expression
Rule 14    expression -> expression DIVIDE expression
Rule 15    expression -> expression POW expression
Rule 16    expression -> LPAREN expression RPAREN
Rule 17    expression -> FUNCTION LPAREN expression RPAREN
Rule 18    empty -> <empty>

Terminals, with rules where they appear

COMPARISON           : 3 3 4
CONST_E              : 8
CONST_PI             : 7
DIVIDE               : 14
FLOAT                : 6
FUNCTION             : 17
INT                  : 5
LPAREN               : 16 17
MINUS                : 10 12
MULTIPLY             : 13
PLUS                 : 11
POW                  : 15
RPAREN               : 16 17
VARIABLE             : 9
error                : 

Nonterminals, with rules where they appear

empty                : 2
expression           : 1 3 3 3 4 4 10 11 11 12 12 13 13 14 14 15 15 16 17
result               : 0

Parsing method: LALR

state 0

    (0) S' -> . result
    (1) result -> . expression
    (2) result -> . empty
    (3) result -> . expression COMPARISON expression COMPARISON expression
    (4) result -> . expression COMPARISON expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN
    (18) empty -> .

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11
    $end            reduce using rule 18 (empty -> .)

    result                         shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> result .



state 2

    (1) result -> expression .
    (3) result -> expression . COMPARISON expression COMPARISON expression
    (4) result -> expression . COMPARISON expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    $end            reduce using rule 1 (result -> expression .)
    COMPARISON      shift and go to state 12
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16
    POW             shift and go to state 17


state 3

    (2) result -> empty .

    $end            reduce using rule 2 (result -> empty .)


state 4

    (5) expression -> INT .

    COMPARISON      reduce using rule 5 (expression -> INT .)
    PLUS            reduce using rule 5 (expression -> INT .)
    MINUS           reduce using rule 5 (expression -> INT .)
    MULTIPLY        reduce using rule 5 (expression -> INT .)
    DIVIDE          reduce using rule 5 (expression -> INT .)
    POW             reduce using rule 5 (expression -> INT .)
    $end            reduce using rule 5 (expression -> INT .)
    RPAREN          reduce using rule 5 (expression -> INT .)


state 5

    (6) expression -> FLOAT .

    COMPARISON      reduce using rule 6 (expression -> FLOAT .)
    PLUS            reduce using rule 6 (expression -> FLOAT .)
    MINUS           reduce using rule 6 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 6 (expression -> FLOAT .)
    DIVIDE          reduce using rule 6 (expression -> FLOAT .)
    POW             reduce using rule 6 (expression -> FLOAT .)
    $end            reduce using rule 6 (expression -> FLOAT .)
    RPAREN          reduce using rule 6 (expression -> FLOAT .)


state 6

    (7) expression -> CONST_PI .

    COMPARISON      reduce using rule 7 (expression -> CONST_PI .)
    PLUS            reduce using rule 7 (expression -> CONST_PI .)
    MINUS           reduce using rule 7 (expression -> CONST_PI .)
    MULTIPLY        reduce using rule 7 (expression -> CONST_PI .)
    DIVIDE          reduce using rule 7 (expression -> CONST_PI .)
    POW             reduce using rule 7 (expression -> CONST_PI .)
    $end            reduce using rule 7 (expression -> CONST_PI .)
    RPAREN          reduce using rule 7 (expression -> CONST_PI .)


state 7

    (8) expression -> CONST_E .

    COMPARISON      reduce using rule 8 (expression -> CONST_E .)
    PLUS            reduce using rule 8 (expression -> CONST_E .)
    MINUS           reduce using rule 8 (expression -> CONST_E .)
    MULTIPLY        reduce using rule 8 (expression -> CONST_E .)
    DIVIDE          reduce using rule 8 (expression -> CONST_E .)
    POW             reduce using rule 8 (expression -> CONST_E .)
    $end            reduce using rule 8 (expression -> CONST_E .)
    RPAREN          reduce using rule 8 (expression -> CONST_E .)


state 8

    (9) expression -> VARIABLE .

    COMPARISON      reduce using rule 9 (expression -> VARIABLE .)
    PLUS            reduce using rule 9 (expression -> VARIABLE .)
    MINUS           reduce using rule 9 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 9 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 9 (expression -> VARIABLE .)
    POW             reduce using rule 9 (expression -> VARIABLE .)
    $end            reduce using rule 9 (expression -> VARIABLE .)
    RPAREN          reduce using rule 9 (expression -> VARIABLE .)


state 9

    (10) expression -> MINUS . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 18

state 10

    (16) expression -> LPAREN . expression RPAREN
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 19

state 11

    (17) expression -> FUNCTION . LPAREN expression RPAREN

    LPAREN          shift and go to state 20


state 12

    (3) result -> expression COMPARISON . expression COMPARISON expression
    (4) result -> expression COMPARISON . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 21

state 13

    (11) expression -> expression PLUS . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 22

state 14

    (12) expression -> expression MINUS . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 23

state 15

    (13) expression -> expression MULTIPLY . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 24

state 16

    (14) expression -> expression DIVIDE . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 25

state 17

    (15) expression -> expression POW . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 26

state 18

    (10) expression -> MINUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    COMPARISON      reduce using rule 10 (expression -> MINUS expression .)
    PLUS            reduce using rule 10 (expression -> MINUS expression .)
    MINUS           reduce using rule 10 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 10 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 10 (expression -> MINUS expression .)
    POW             reduce using rule 10 (expression -> MINUS expression .)
    $end            reduce using rule 10 (expression -> MINUS expression .)
    RPAREN          reduce using rule 10 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! MULTIPLY        [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 16 ]
  ! POW             [ shift and go to state 17 ]


state 19

    (16) expression -> LPAREN expression . RPAREN
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    RPAREN          shift and go to state 27
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16
    POW             shift and go to state 17


state 20

    (17) expression -> FUNCTION LPAREN . expression RPAREN
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 28

state 21

    (3) result -> expression COMPARISON expression . COMPARISON expression
    (4) result -> expression COMPARISON expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    COMPARISON      shift and go to state 29
    $end            reduce using rule 4 (result -> expression COMPARISON expression .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16
    POW             shift and go to state 17


state 22

    (11) expression -> expression PLUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    COMPARISON      reduce using rule 11 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 11 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 11 (expression -> expression PLUS expression .)
    $end            reduce using rule 11 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 11 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16
    POW             shift and go to state 17

  ! MULTIPLY        [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]


state 23

    (12) expression -> expression MINUS expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    COMPARISON      reduce using rule 12 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 12 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 12 (expression -> expression MINUS expression .)
    $end            reduce using rule 12 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 12 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16
    POW             shift and go to state 17

  ! MULTIPLY        [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]


state 24

    (13) expression -> expression MULTIPLY expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    COMPARISON      reduce using rule 13 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 13 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 13 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 13 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 13 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 13 (expression -> expression MULTIPLY expression .)
    POW             shift and go to state 17

  ! POW             [ reduce using rule 13 (expression -> expression MULTIPLY expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! MULTIPLY        [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 25

    (14) expression -> expression DIVIDE expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    COMPARISON      reduce using rule 14 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 14 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 14 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 14 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 14 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 14 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 14 (expression -> expression DIVIDE expression .)
    POW             shift and go to state 17

  ! POW             [ reduce using rule 14 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! MULTIPLY        [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 26

    (15) expression -> expression POW expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    COMPARISON      reduce using rule 15 (expression -> expression POW expression .)
    PLUS            reduce using rule 15 (expression -> expression POW expression .)
    MINUS           reduce using rule 15 (expression -> expression POW expression .)
    MULTIPLY        reduce using rule 15 (expression -> expression POW expression .)
    DIVIDE          reduce using rule 15 (expression -> expression POW expression .)
    $end            reduce using rule 15 (expression -> expression POW expression .)
    RPAREN          reduce using rule 15 (expression -> expression POW expression .)
    POW             shift and go to state 17

  ! POW             [ reduce using rule 15 (expression -> expression POW expression .) ]
  ! PLUS            [ shift and go to state 13 ]
  ! MINUS           [ shift and go to state 14 ]
  ! MULTIPLY        [ shift and go to state 15 ]
  ! DIVIDE          [ shift and go to state 16 ]


state 27

    (16) expression -> LPAREN expression RPAREN .

    COMPARISON      reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 16 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 16 (expression -> LPAREN expression RPAREN .)


state 28

    (17) expression -> FUNCTION LPAREN expression . RPAREN
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    RPAREN          shift and go to state 30
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16
    POW             shift and go to state 17


state 29

    (3) result -> expression COMPARISON expression COMPARISON . expression
    (5) expression -> . INT
    (6) expression -> . FLOAT
    (7) expression -> . CONST_PI
    (8) expression -> . CONST_E
    (9) expression -> . VARIABLE
    (10) expression -> . MINUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . expression MULTIPLY expression
    (14) expression -> . expression DIVIDE expression
    (15) expression -> . expression POW expression
    (16) expression -> . LPAREN expression RPAREN
    (17) expression -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    MINUS           shift and go to state 9
    LPAREN          shift and go to state 10
    FUNCTION        shift and go to state 11

    expression                     shift and go to state 31

state 30

    (17) expression -> FUNCTION LPAREN expression RPAREN .

    COMPARISON      reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)
    PLUS            reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)
    MINUS           reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)
    POW             reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)
    $end            reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)
    RPAREN          reduce using rule 17 (expression -> FUNCTION LPAREN expression RPAREN .)


state 31

    (3) result -> expression COMPARISON expression COMPARISON expression .
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression
    (13) expression -> expression . MULTIPLY expression
    (14) expression -> expression . DIVIDE expression
    (15) expression -> expression . POW expression

    $end            reduce using rule 3 (result -> expression COMPARISON expression COMPARISON expression .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16
    POW             shift and go to state 17

