Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> result
Rule 1     result -> expression
Rule 2     result -> empty
Rule 3     result -> expression COMPARISON expression COMPARISON expression
Rule 4     result -> expression COMPARISON expression
Rule 5     factor -> INT
Rule 6     factor -> FLOAT
Rule 7     factor -> CONST_PI
Rule 8     factor -> CONST_E
Rule 9     factor -> VARIABLE
Rule 10    expression -> MINUS expression
Rule 11    expression -> term
Rule 12    term -> factor
Rule 13    expression -> expression PLUS expression
Rule 14    expression -> expression MINUS expression
Rule 15    term -> term MULTIPLY factor
Rule 16    term -> term DIVIDE factor
Rule 17    factor -> factor POW factor
Rule 18    expression -> term VARIABLE
Rule 19    factor -> LPAREN expression RPAREN
Rule 20    factor -> FUNCTION LPAREN expression RPAREN
Rule 21    empty -> <empty>

Terminals, with rules where they appear

COMPARISON           : 3 3 4
CONST_E              : 8
CONST_PI             : 7
DIVIDE               : 16
FLOAT                : 6
FUNCTION             : 20
INT                  : 5
LPAREN               : 19 20
MINUS                : 10 14
MULTIPLY             : 15
PLUS                 : 13
POW                  : 17
RPAREN               : 19 20
VARIABLE             : 9 18
error                : 

Nonterminals, with rules where they appear

empty                : 2
expression           : 1 3 3 3 4 4 10 13 13 14 14 19 20
factor               : 12 15 16 17 17
result               : 0
term                 : 11 15 16 18

Parsing method: LALR

state 0

    (0) S' -> . result
    (1) result -> . expression
    (2) result -> . empty
    (3) result -> . expression COMPARISON expression COMPARISON expression
    (4) result -> . expression COMPARISON expression
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (21) empty -> .
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    $end            reduce using rule 21 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    result                         shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 1

    (0) S' -> result .



state 2

    (1) result -> expression .
    (3) result -> expression . COMPARISON expression COMPARISON expression
    (4) result -> expression . COMPARISON expression
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    $end            reduce using rule 1 (result -> expression .)
    COMPARISON      shift and go to state 14
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 3

    (2) result -> empty .

    $end            reduce using rule 2 (result -> empty .)


state 4

    (10) expression -> MINUS . expression
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    expression                     shift and go to state 17
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 5

    (11) expression -> term .
    (18) expression -> term . VARIABLE
    (15) term -> term . MULTIPLY factor
    (16) term -> term . DIVIDE factor

    COMPARISON      reduce using rule 11 (expression -> term .)
    PLUS            reduce using rule 11 (expression -> term .)
    MINUS           reduce using rule 11 (expression -> term .)
    $end            reduce using rule 11 (expression -> term .)
    RPAREN          reduce using rule 11 (expression -> term .)
    VARIABLE        shift and go to state 18
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20


state 6

    (9) factor -> VARIABLE .

    POW             reduce using rule 9 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 9 (factor -> VARIABLE .)
    MULTIPLY        reduce using rule 9 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 9 (factor -> VARIABLE .)
    COMPARISON      reduce using rule 9 (factor -> VARIABLE .)
    PLUS            reduce using rule 9 (factor -> VARIABLE .)
    MINUS           reduce using rule 9 (factor -> VARIABLE .)
    $end            reduce using rule 9 (factor -> VARIABLE .)
    RPAREN          reduce using rule 9 (factor -> VARIABLE .)


state 7

    (12) term -> factor .
    (17) factor -> factor . POW factor

    VARIABLE        reduce using rule 12 (term -> factor .)
    MULTIPLY        reduce using rule 12 (term -> factor .)
    DIVIDE          reduce using rule 12 (term -> factor .)
    COMPARISON      reduce using rule 12 (term -> factor .)
    PLUS            reduce using rule 12 (term -> factor .)
    MINUS           reduce using rule 12 (term -> factor .)
    $end            reduce using rule 12 (term -> factor .)
    RPAREN          reduce using rule 12 (term -> factor .)
    POW             shift and go to state 21


state 8

    (5) factor -> INT .

    POW             reduce using rule 5 (factor -> INT .)
    VARIABLE        reduce using rule 5 (factor -> INT .)
    MULTIPLY        reduce using rule 5 (factor -> INT .)
    DIVIDE          reduce using rule 5 (factor -> INT .)
    COMPARISON      reduce using rule 5 (factor -> INT .)
    PLUS            reduce using rule 5 (factor -> INT .)
    MINUS           reduce using rule 5 (factor -> INT .)
    $end            reduce using rule 5 (factor -> INT .)
    RPAREN          reduce using rule 5 (factor -> INT .)


state 9

    (6) factor -> FLOAT .

    POW             reduce using rule 6 (factor -> FLOAT .)
    VARIABLE        reduce using rule 6 (factor -> FLOAT .)
    MULTIPLY        reduce using rule 6 (factor -> FLOAT .)
    DIVIDE          reduce using rule 6 (factor -> FLOAT .)
    COMPARISON      reduce using rule 6 (factor -> FLOAT .)
    PLUS            reduce using rule 6 (factor -> FLOAT .)
    MINUS           reduce using rule 6 (factor -> FLOAT .)
    $end            reduce using rule 6 (factor -> FLOAT .)
    RPAREN          reduce using rule 6 (factor -> FLOAT .)


state 10

    (7) factor -> CONST_PI .

    POW             reduce using rule 7 (factor -> CONST_PI .)
    VARIABLE        reduce using rule 7 (factor -> CONST_PI .)
    MULTIPLY        reduce using rule 7 (factor -> CONST_PI .)
    DIVIDE          reduce using rule 7 (factor -> CONST_PI .)
    COMPARISON      reduce using rule 7 (factor -> CONST_PI .)
    PLUS            reduce using rule 7 (factor -> CONST_PI .)
    MINUS           reduce using rule 7 (factor -> CONST_PI .)
    $end            reduce using rule 7 (factor -> CONST_PI .)
    RPAREN          reduce using rule 7 (factor -> CONST_PI .)


state 11

    (8) factor -> CONST_E .

    POW             reduce using rule 8 (factor -> CONST_E .)
    VARIABLE        reduce using rule 8 (factor -> CONST_E .)
    MULTIPLY        reduce using rule 8 (factor -> CONST_E .)
    DIVIDE          reduce using rule 8 (factor -> CONST_E .)
    COMPARISON      reduce using rule 8 (factor -> CONST_E .)
    PLUS            reduce using rule 8 (factor -> CONST_E .)
    MINUS           reduce using rule 8 (factor -> CONST_E .)
    $end            reduce using rule 8 (factor -> CONST_E .)
    RPAREN          reduce using rule 8 (factor -> CONST_E .)


state 12

    (19) factor -> LPAREN . expression RPAREN
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    expression                     shift and go to state 22
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 13

    (20) factor -> FUNCTION . LPAREN expression RPAREN

    LPAREN          shift and go to state 23


state 14

    (3) result -> expression COMPARISON . expression COMPARISON expression
    (4) result -> expression COMPARISON . expression
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    expression                     shift and go to state 24
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 15

    (13) expression -> expression PLUS . expression
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    expression                     shift and go to state 25
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 16

    (14) expression -> expression MINUS . expression
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    expression                     shift and go to state 26
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 17

    (10) expression -> MINUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    COMPARISON      reduce using rule 10 (expression -> MINUS expression .)
    PLUS            reduce using rule 10 (expression -> MINUS expression .)
    MINUS           reduce using rule 10 (expression -> MINUS expression .)
    $end            reduce using rule 10 (expression -> MINUS expression .)
    RPAREN          reduce using rule 10 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 18

    (18) expression -> term VARIABLE .

    COMPARISON      reduce using rule 18 (expression -> term VARIABLE .)
    PLUS            reduce using rule 18 (expression -> term VARIABLE .)
    MINUS           reduce using rule 18 (expression -> term VARIABLE .)
    $end            reduce using rule 18 (expression -> term VARIABLE .)
    RPAREN          reduce using rule 18 (expression -> term VARIABLE .)


state 19

    (15) term -> term MULTIPLY . factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    factor                         shift and go to state 27

state 20

    (16) term -> term DIVIDE . factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    factor                         shift and go to state 28

state 21

    (17) factor -> factor POW . factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    factor                         shift and go to state 29

state 22

    (19) factor -> LPAREN expression . RPAREN
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    RPAREN          shift and go to state 30
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 23

    (20) factor -> FUNCTION LPAREN . expression RPAREN
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    expression                     shift and go to state 31
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 24

    (3) result -> expression COMPARISON expression . COMPARISON expression
    (4) result -> expression COMPARISON expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    COMPARISON      shift and go to state 32
    $end            reduce using rule 4 (result -> expression COMPARISON expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 25

    (13) expression -> expression PLUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    COMPARISON      reduce using rule 13 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 13 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 13 (expression -> expression PLUS expression .)
    $end            reduce using rule 13 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 13 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 26

    (14) expression -> expression MINUS expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    COMPARISON      reduce using rule 14 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 14 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 14 (expression -> expression MINUS expression .)
    $end            reduce using rule 14 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 15 ]
  ! MINUS           [ shift and go to state 16 ]


state 27

    (15) term -> term MULTIPLY factor .
    (17) factor -> factor . POW factor

    VARIABLE        reduce using rule 15 (term -> term MULTIPLY factor .)
    MULTIPLY        reduce using rule 15 (term -> term MULTIPLY factor .)
    DIVIDE          reduce using rule 15 (term -> term MULTIPLY factor .)
    COMPARISON      reduce using rule 15 (term -> term MULTIPLY factor .)
    PLUS            reduce using rule 15 (term -> term MULTIPLY factor .)
    MINUS           reduce using rule 15 (term -> term MULTIPLY factor .)
    $end            reduce using rule 15 (term -> term MULTIPLY factor .)
    RPAREN          reduce using rule 15 (term -> term MULTIPLY factor .)
    POW             shift and go to state 21


state 28

    (16) term -> term DIVIDE factor .
    (17) factor -> factor . POW factor

    VARIABLE        reduce using rule 16 (term -> term DIVIDE factor .)
    MULTIPLY        reduce using rule 16 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 16 (term -> term DIVIDE factor .)
    COMPARISON      reduce using rule 16 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 16 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 16 (term -> term DIVIDE factor .)
    $end            reduce using rule 16 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 16 (term -> term DIVIDE factor .)
    POW             shift and go to state 21


state 29

    (17) factor -> factor POW factor .
    (17) factor -> factor . POW factor

    VARIABLE        reduce using rule 17 (factor -> factor POW factor .)
    MULTIPLY        reduce using rule 17 (factor -> factor POW factor .)
    DIVIDE          reduce using rule 17 (factor -> factor POW factor .)
    COMPARISON      reduce using rule 17 (factor -> factor POW factor .)
    PLUS            reduce using rule 17 (factor -> factor POW factor .)
    MINUS           reduce using rule 17 (factor -> factor POW factor .)
    $end            reduce using rule 17 (factor -> factor POW factor .)
    RPAREN          reduce using rule 17 (factor -> factor POW factor .)
    POW             shift and go to state 21

  ! POW             [ reduce using rule 17 (factor -> factor POW factor .) ]


state 30

    (19) factor -> LPAREN expression RPAREN .

    POW             reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    COMPARISON      reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (factor -> LPAREN expression RPAREN .)


state 31

    (20) factor -> FUNCTION LPAREN expression . RPAREN
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    RPAREN          shift and go to state 33
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16


state 32

    (3) result -> expression COMPARISON expression COMPARISON . expression
    (10) expression -> . MINUS expression
    (11) expression -> . term
    (13) expression -> . expression PLUS expression
    (14) expression -> . expression MINUS expression
    (18) expression -> . term VARIABLE
    (12) term -> . factor
    (15) term -> . term MULTIPLY factor
    (16) term -> . term DIVIDE factor
    (5) factor -> . INT
    (6) factor -> . FLOAT
    (7) factor -> . CONST_PI
    (8) factor -> . CONST_E
    (9) factor -> . VARIABLE
    (17) factor -> . factor POW factor
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . FUNCTION LPAREN expression RPAREN

    MINUS           shift and go to state 4
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    CONST_PI        shift and go to state 10
    CONST_E         shift and go to state 11
    VARIABLE        shift and go to state 6
    LPAREN          shift and go to state 12
    FUNCTION        shift and go to state 13

    expression                     shift and go to state 34
    term                           shift and go to state 5
    factor                         shift and go to state 7

state 33

    (20) factor -> FUNCTION LPAREN expression RPAREN .

    POW             reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    COMPARISON      reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    PLUS            reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    MINUS           reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    $end            reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)
    RPAREN          reduce using rule 20 (factor -> FUNCTION LPAREN expression RPAREN .)


state 34

    (3) result -> expression COMPARISON expression COMPARISON expression .
    (13) expression -> expression . PLUS expression
    (14) expression -> expression . MINUS expression

    $end            reduce using rule 3 (result -> expression COMPARISON expression COMPARISON expression .)
    PLUS            shift and go to state 15
    MINUS           shift and go to state 16

