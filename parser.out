Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    LESS
    LESSEQUAL
    LPAREN
    MORE
    MOREEQUAL
    POW
    RPAREN

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> empty
Rule 3     expression -> INT
Rule 4     expression -> FLOAT
Rule 5     expression -> CONST_PI
Rule 6     expression -> CONST_E
Rule 7     expression -> VARIABLE
Rule 8     expression -> expression PLUS expression
Rule 9     expression -> expression MINUS expression
Rule 10    expression -> expression MULTIPLY expression
Rule 11    expression -> expression DIVIDE expression
Rule 12    empty -> <empty>

Terminals, with rules where they appear

CONST_E              : 6
CONST_PI             : 5
DIVIDE               : 11
FLOAT                : 4
FUNCTION             : 
INT                  : 3
LESS                 : 
LESSEQUAL            : 
LPAREN               : 
MINUS                : 9
MORE                 : 
MOREEQUAL            : 
MULTIPLY             : 10
PLUS                 : 8
POW                  : 
RPAREN               : 
VARIABLE             : 7
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 2
expression           : 1 8 8 9 9 10 10 11 11

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . empty
    (3) expression -> . INT
    (4) expression -> . FLOAT
    (5) expression -> . CONST_PI
    (6) expression -> . CONST_E
    (7) expression -> . VARIABLE
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression
    (12) empty -> .

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8
    $end            reduce using rule 12 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (calc -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12


state 3

    (2) calc -> empty .

    $end            reduce using rule 2 (calc -> empty .)


state 4

    (3) expression -> INT .

    PLUS            reduce using rule 3 (expression -> INT .)
    MINUS           reduce using rule 3 (expression -> INT .)
    MULTIPLY        reduce using rule 3 (expression -> INT .)
    DIVIDE          reduce using rule 3 (expression -> INT .)
    $end            reduce using rule 3 (expression -> INT .)


state 5

    (4) expression -> FLOAT .

    PLUS            reduce using rule 4 (expression -> FLOAT .)
    MINUS           reduce using rule 4 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 4 (expression -> FLOAT .)
    DIVIDE          reduce using rule 4 (expression -> FLOAT .)
    $end            reduce using rule 4 (expression -> FLOAT .)


state 6

    (5) expression -> CONST_PI .

    PLUS            reduce using rule 5 (expression -> CONST_PI .)
    MINUS           reduce using rule 5 (expression -> CONST_PI .)
    MULTIPLY        reduce using rule 5 (expression -> CONST_PI .)
    DIVIDE          reduce using rule 5 (expression -> CONST_PI .)
    $end            reduce using rule 5 (expression -> CONST_PI .)


state 7

    (6) expression -> CONST_E .

    PLUS            reduce using rule 6 (expression -> CONST_E .)
    MINUS           reduce using rule 6 (expression -> CONST_E .)
    MULTIPLY        reduce using rule 6 (expression -> CONST_E .)
    DIVIDE          reduce using rule 6 (expression -> CONST_E .)
    $end            reduce using rule 6 (expression -> CONST_E .)


state 8

    (7) expression -> VARIABLE .

    PLUS            reduce using rule 7 (expression -> VARIABLE .)
    MINUS           reduce using rule 7 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 7 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 7 (expression -> VARIABLE .)
    $end            reduce using rule 7 (expression -> VARIABLE .)


state 9

    (8) expression -> expression PLUS . expression
    (3) expression -> . INT
    (4) expression -> . FLOAT
    (5) expression -> . CONST_PI
    (6) expression -> . CONST_E
    (7) expression -> . VARIABLE
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8

    expression                     shift and go to state 13

state 10

    (9) expression -> expression MINUS . expression
    (3) expression -> . INT
    (4) expression -> . FLOAT
    (5) expression -> . CONST_PI
    (6) expression -> . CONST_E
    (7) expression -> . VARIABLE
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8

    expression                     shift and go to state 14

state 11

    (10) expression -> expression MULTIPLY . expression
    (3) expression -> . INT
    (4) expression -> . FLOAT
    (5) expression -> . CONST_PI
    (6) expression -> . CONST_E
    (7) expression -> . VARIABLE
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8

    expression                     shift and go to state 15

state 12

    (11) expression -> expression DIVIDE . expression
    (3) expression -> . INT
    (4) expression -> . FLOAT
    (5) expression -> . CONST_PI
    (6) expression -> . CONST_E
    (7) expression -> . VARIABLE
    (8) expression -> . expression PLUS expression
    (9) expression -> . expression MINUS expression
    (10) expression -> . expression MULTIPLY expression
    (11) expression -> . expression DIVIDE expression

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    CONST_PI        shift and go to state 6
    CONST_E         shift and go to state 7
    VARIABLE        shift and go to state 8

    expression                     shift and go to state 16

state 13

    (8) expression -> expression PLUS expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 8 (expression -> expression PLUS expression .)
    $end            reduce using rule 8 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! MULTIPLY        [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 14

    (9) expression -> expression MINUS expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 9 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 9 (expression -> expression MINUS expression .)
    $end            reduce using rule 9 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! MULTIPLY        [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 15

    (10) expression -> expression MULTIPLY expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 10 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 10 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 10 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 10 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]


state 16

    (11) expression -> expression DIVIDE expression .
    (8) expression -> expression . PLUS expression
    (9) expression -> expression . MINUS expression
    (10) expression -> expression . MULTIPLY expression
    (11) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 11 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 11 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 11 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 11 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 11 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]

